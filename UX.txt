
Interaction design - 

Divide adding and editing of providers, products, plans, and maybe individual quotes

  - providers
        - add: assume nothing
		- list all providers in this database
		- name input
		- provide add product link/button
	- edit: assume prov ID/provider name
		- allow update of name
		- also provide edit product link/button with list of products (if any yet)
  - products:
	- add: assume prov ID/provider name
		- list all products from this provider
		- input for name, dates, exclusions
		- provide add plan link/button
	- edit: assume prov ID/product name,
		- allow update into a product record of name, dates, exclusions
		- also provide edit plan link/button with list of plans (if any yet)
  - plans
	- add: assume prod_id/product name
		- list all plans in this product
		- input gender/type (inpatient-outpatient) selection
		- provide add quotes link/button
	- edit: assume plan ID/plan "name" (maybe combined gender+type)
		- allow update into a plan record
		- also provide edit quotes link/button with list of quotes

Pattern:

Add:
    input: what type of thing to add to (database takes provider add, provider takes product add, etc.)
           plus ID of what to add to (parent in structure)
    list of all things of the same type, limited by what to add to
    prompts and edit fields for this type (shared with edit)
    a link/button to add things of the type for children

Edit:
    input: what type of thing to edit,
           plus ID of what to edit (not parent in structure)
    prompts and edit fields for this type (shared with add)
    also provide edit link/button for next level down (children)
    
New
	Current code handles this, but throws an SQL error (integrity constraint violation)
	if you try to add something using INSERT INTO that already has a unique ID

	In this case, there should be ways of going immediately to enter subsidiary
	records, e.g., a product for a new provider, a plan for a new product,
	and quotes for a new plan
Change
	Current code could probably do this by detecting that there's already a record
	with the same ID, and doing an UPDATE query
Delete
	would mean deleting everything below it in the composition hierarchy.
	Simplified by changing the integrity constraints to CASCADE?    

